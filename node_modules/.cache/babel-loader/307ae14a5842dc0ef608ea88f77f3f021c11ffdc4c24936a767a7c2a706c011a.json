{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Desktop\\\\projetsgit\\\\kasa\\\\src\\\\components\\\\Collapse\\\\Collapse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport \"./Collapse.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collapse = props => {\n  _s();\n  // State variables using the useState hook.\n  const [open, setOpen] = useState(false); // Represents the state of whether the collapse is open or closed.\n  const [rotate, setRotate] = useState(\"0deg\"); // Represents the rotation of the arrow icon.\n\n  // useRef to get a reference to the arrow div for manipulation.\n  const arrow = useRef();\n\n  // Function to toggle the open state and rotate the arrow when the button is clicked.\n  const toggleArrow = () => {\n    setOpen(!open); // Toggles the open state.\n    if (!open) {\n      setRotate(\"180deg\"); // Rotates the arrow 180 degrees if opening.\n    } else {\n      setRotate(\"0deg\"); // Rotates the arrow back to 0 degrees if closing.\n    }\n  };\n\n  // \n  let equipmentList;\n  if (props.list) {\n    equipmentList = props.list.map((data, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: data\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this));\n  }\n\n  // Rendering the component.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"collapseContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"collapse-btn\",\n      onClick: toggleArrow,\n      children: [props.label, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          rotate\n        },\n        ref: arrow,\n        className: \"arrow\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: arrow,\n          alt: \"bouton fl\\xE8che\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: open ? \"children-show\" : \"children-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"children-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: props.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: equipmentList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(Collapse, \"rjKou9JDrqhTLx8dPjBgoASl+Z0=\");\n_c = Collapse;\nexport default Collapse;\nvar _c;\n$RefreshReg$(_c, \"Collapse\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","Collapse","props","_s","open","setOpen","rotate","setRotate","arrow","toggleArrow","equipmentList","list","map","data","index","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","label","style","ref","src","alt","content","_c","$RefreshReg$"],"sources":["C:/Users/Utilisateur/Desktop/projetsgit/kasa/src/components/Collapse/Collapse.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport \"./Collapse.scss\";\r\n\r\nconst Collapse = (props) => {\r\n    // State variables using the useState hook.\r\n    const [open, setOpen] = useState(false); // Represents the state of whether the collapse is open or closed.\r\n    const [rotate, setRotate] = useState(\"0deg\"); // Represents the rotation of the arrow icon.\r\n\r\n    // useRef to get a reference to the arrow div for manipulation.\r\n    const arrow = useRef();\r\n\r\n    // Function to toggle the open state and rotate the arrow when the button is clicked.\r\n    const toggleArrow = () => {\r\n        setOpen(!open); // Toggles the open state.\r\n        if (!open) {\r\n            setRotate(\"180deg\"); // Rotates the arrow 180 degrees if opening.\r\n        } else {\r\n            setRotate(\"0deg\"); // Rotates the arrow back to 0 degrees if closing.\r\n        }\r\n    };\r\n\r\n    // \r\n    let equipmentList ;\r\n    if (props.list) {\r\n        equipmentList = props.list.map((data, index) => (\r\n            <li key={index}>{data}</li>\r\n        ));\r\n    }\r\n\r\n    // Rendering the component.\r\n    return (\r\n        <div className=\"collapseContainer\">\r\n            <button className=\"collapse-btn\" onClick={toggleArrow}>\r\n                {props.label}\r\n                <div style={{ rotate }} ref={arrow} className=\"arrow\">\r\n                    <img src={arrow} alt=\"bouton flÃ¨che\"></img>\r\n                </div>\r\n            </button>\r\n            {/* Content that is shown or hidden based on the 'open' state */}\r\n            <div className={open ? \"children-show\" : \"children-hidden\"}>\r\n                <div className=\"children-content\">\r\n                    <p>{props.content}</p>\r\n                    <ul>{equipmentList}</ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Collapse;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMW,KAAK,GAAGV,MAAM,CAAC,CAAC;;EAEtB;EACA,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACtBJ,OAAO,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC;IAChB,IAAI,CAACA,IAAI,EAAE;MACPG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM;MACHA,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACvB;EACJ,CAAC;;EAED;EACA,IAAIG,aAAa;EACjB,IAAIR,KAAK,CAACS,IAAI,EAAE;IACZD,aAAa,GAAGR,KAAK,CAACS,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACvCd,OAAA;MAAAe,QAAA,EAAiBF;IAAI,GAAZC,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAC7B,CAAC;EACN;;EAEA;EACA,oBACInB,OAAA;IAAKoB,SAAS,EAAC,mBAAmB;IAAAL,QAAA,gBAC9Bf,OAAA;MAAQoB,SAAS,EAAC,cAAc;MAACC,OAAO,EAAEZ,WAAY;MAAAM,QAAA,GACjDb,KAAK,CAACoB,KAAK,eACZtB,OAAA;QAAKuB,KAAK,EAAE;UAAEjB;QAAO,CAAE;QAACkB,GAAG,EAAEhB,KAAM;QAACY,SAAS,EAAC,OAAO;QAAAL,QAAA,eACjDf,OAAA;UAAKyB,GAAG,EAAEjB,KAAM;UAACkB,GAAG,EAAC;QAAe;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAETnB,OAAA;MAAKoB,SAAS,EAAEhB,IAAI,GAAG,eAAe,GAAG,iBAAkB;MAAAW,QAAA,eACvDf,OAAA;QAAKoB,SAAS,EAAC,kBAAkB;QAAAL,QAAA,gBAC7Bf,OAAA;UAAAe,QAAA,EAAIb,KAAK,CAACyB;QAAO;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBnB,OAAA;UAAAe,QAAA,EAAKL;QAAa;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAChB,EAAA,CA5CIF,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AA+Cd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}