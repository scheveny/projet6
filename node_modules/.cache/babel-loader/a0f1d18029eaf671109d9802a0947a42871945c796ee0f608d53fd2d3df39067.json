{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utilisateur\\\\Desktop\\\\projetsgit\\\\kasa\\\\src\\\\components\\\\Carousel\\\\Carousel.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Carousel.scss\";\nimport leftArrow from \"../../assets/carousel-left-arrow.png\";\nimport rightArrow from \"../../assets/carousel-right-arrow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Carousel({\n  pictures\n}) {\n  _s();\n  // Using the state hook to manage the index of the currently displayed image.\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  // Function to move to the next image in the carousel.\n  const NextImg = () => {\n    // If at the end of the array, go back to the first element; otherwise, go to the next element.\n    if (currentIndex === pictures.length - 1) {\n      setCurrentIndex(0);\n    } else {\n      setCurrentIndex(prevIndex => prevIndex + 1);\n    }\n  };\n\n  // Function to move to the previous image in the carousel.\n  const PrevImg = () => {\n    // If at the beginning of the array, go to the last element; otherwise, go to the previous element.\n    if (currentIndex === 0) {\n      setCurrentIndex(pictures.length - 1);\n    } else {\n      setCurrentIndex(prevIndex => prevIndex - 1);\n    }\n  };\n\n  // Rendering JSX element representing the carousel.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel\",\n    children: [pictures.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prev\",\n      onClick: PrevImg,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: leftArrow,\n        alt: \"fl\\xE8che gauche du carrousel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pictures[currentIndex],\n      alt: `Slide ${currentIndex + 1}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"positionIndicator\",\n      children: [currentIndex + 1, \"/\", pictures.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), pictures.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next\",\n      onClick: NextImg,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: rightArrow,\n        alt: \"fl\\xE8che gauche du carrousel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(Carousel, \"tusBbsahUVevXfyh6oH5R6YDC9Q=\");\n_c = Carousel;\nexport default Carousel;\nvar _c;\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"names":["React","useState","leftArrow","rightArrow","jsxDEV","_jsxDEV","Carousel","pictures","_s","currentIndex","setCurrentIndex","NextImg","length","prevIndex","PrevImg","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Utilisateur/Desktop/projetsgit/kasa/src/components/Carousel/Carousel.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Carousel.scss\";\r\nimport leftArrow from \"../../assets/carousel-left-arrow.png\";\r\nimport rightArrow from \"../../assets/carousel-right-arrow.png\";\r\n\r\nfunction Carousel({ pictures }) {\r\n    // Using the state hook to manage the index of the currently displayed image.\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n    // Function to move to the next image in the carousel.\r\n    const NextImg = () => {\r\n        // If at the end of the array, go back to the first element; otherwise, go to the next element.\r\n        if (currentIndex === pictures.length - 1) {\r\n            setCurrentIndex(0);\r\n        } else {\r\n            setCurrentIndex(prevIndex => prevIndex + 1);\r\n        }\r\n    };\r\n\r\n    // Function to move to the previous image in the carousel.\r\n    const PrevImg = () => {\r\n        // If at the beginning of the array, go to the last element; otherwise, go to the previous element.\r\n        if (currentIndex === 0) {\r\n            setCurrentIndex(pictures.length - 1);\r\n        } else {\r\n            setCurrentIndex(prevIndex => prevIndex - 1);\r\n        }\r\n    };\r\n\r\n    // Rendering JSX element representing the carousel.\r\n    return (\r\n        <div className=\"carousel\">\r\n            {/* Displaying the previous button only if there is more than one image in the carousel. */}\r\n            {pictures.length > 1 && (\r\n                <div className=\"prev\" onClick={PrevImg}>\r\n                    <img src={leftArrow} alt=\"flèche gauche du carrousel\" />\r\n                </div>\r\n            )}\r\n\r\n            <img\r\n                src={pictures[currentIndex]}\r\n                alt={`Slide ${currentIndex + 1}`}\r\n            />\r\n\r\n            {/* Displaying the position indicator in the carousel */}\r\n            <div className=\"positionIndicator\">\r\n                {currentIndex + 1}/{pictures.length}\r\n            </div>\r\n\r\n            {/* Displaying the next button only if there is more than one image in the carousel. */}\r\n            {pictures.length > 1 && (\r\n                <div className=\"next\" onClick={NextImg}>\r\n                    <img src={rightArrow} alt=\"flèche gauche du carrousel\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Carousel;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AACxB,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,OAAOC,UAAU,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,SAASC,QAAQA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACA,MAAMU,OAAO,GAAGA,CAAA,KAAM;IAClB;IACA,IAAIF,YAAY,KAAKF,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;MACtCF,eAAe,CAAC,CAAC,CAAC;IACtB,CAAC,MAAM;MACHA,eAAe,CAACG,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IAC/C;EACJ,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;IAClB;IACA,IAAIL,YAAY,KAAK,CAAC,EAAE;MACpBC,eAAe,CAACH,QAAQ,CAACK,MAAM,GAAG,CAAC,CAAC;IACxC,CAAC,MAAM;MACHF,eAAe,CAACG,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IAC/C;EACJ,CAAC;;EAED;EACA,oBACIR,OAAA;IAAKU,SAAS,EAAC,UAAU;IAAAC,QAAA,GAEpBT,QAAQ,CAACK,MAAM,GAAG,CAAC,iBAChBP,OAAA;MAAKU,SAAS,EAAC,MAAM;MAACE,OAAO,EAAEH,OAAQ;MAAAE,QAAA,eACnCX,OAAA;QAAKa,GAAG,EAAEhB,SAAU;QAACiB,GAAG,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CACR,eAEDlB,OAAA;MACIa,GAAG,EAAEX,QAAQ,CAACE,YAAY,CAAE;MAC5BU,GAAG,EAAG,SAAQV,YAAY,GAAG,CAAE;IAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eAGFlB,OAAA;MAAKU,SAAS,EAAC,mBAAmB;MAAAC,QAAA,GAC7BP,YAAY,GAAG,CAAC,EAAC,GAAC,EAACF,QAAQ,CAACK,MAAM;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EAGLhB,QAAQ,CAACK,MAAM,GAAG,CAAC,iBAChBP,OAAA;MAAKU,SAAS,EAAC,MAAM;MAACE,OAAO,EAAEN,OAAQ;MAAAK,QAAA,eACnCX,OAAA;QAAKa,GAAG,EAAEf,UAAW;QAACgB,GAAG,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACf,EAAA,CApDQF,QAAQ;AAAAkB,EAAA,GAARlB,QAAQ;AAsDjB,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}